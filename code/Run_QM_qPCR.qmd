 ---
title: "Joint QM-qPCR Model of Hake Survey Samples"
format: 
  html: 
    self-contained: true
    toc: true
  pdf: 
    toc: true
    include-in-header:
      - text: |
          \usepackage{subfig}
          \usepackage{pdflscape}
          \newcommand{\blandscape}{\begin{landscape}}
          \newcommand{\elandscape}{\end{landscape}}
editor: visual
---

```{r setup}
library(tidyverse)
library(rstan)
library(here)
```


# Introduction

We implement and fit a Stan model that jointly models qPCR and metabarcoding data for hake survey samples. The goal is to make quantitative estimates of real eDNA concentration for species for which we have MiFish metabarcoding data, but DO NOT have qPCR data. We use qPCR data from one, common reference species (Pacific hake) to expand metabarcoding read counts into quantitative eDNA concentration estimates.

# Import Data

The first script loads the metabarcoding, qPCR, and mock community data. The second script loads functions that are useful for working with the data and setting up the Stan model.

```{r}
source(here('code','1_load_data.R'))

source(here("code/qm_data_prep_functions.R"))
```

## Format for Stan

We can prepare the data we just loaded to be input into our Stan model, using some of the functions in the previous script.

```{r}
# metabarcoding
formatted_metabarcoding_data <- format_metabarcoding_data(mfu, mock,
                                                     Level_1_treatment_envir <- "Sample",
                                                     Level_2_treatment_envir <- "tech",
                                                     Level_3_treatment_envir <- NA,
                                                     Level_1_treatment_mock <- "Sample",
                                                     Level_2_treatment_mock <- "Rep",
                                                     Level_3_treatment_mock <- NA) 
stan_metabarcoding_data <- formatted_metabarcoding_data%>% 
  makeDesign(N_pcr_cycles = 43, Nlevels_mock = 2, Nlevels_samp = 2)

#qPCR
stan_qPCR_data <- format_qPCR_data(qPCR_unk,qPCR_std) %>% 
  prepare_stan_data_qPCR()

# linking data
qPCR_mb_link <- prepare_stan_qPCR_mb_join(mfu,qPCR_unk,qPCR_std,link_species = "Merluccius productus")

# join the three lists
stan_data_joint <- c(stan_qPCR_data,stan_metabarcoding_data,qPCR_mb_link)
```

Now the data should be ready for Stan. We compile the Stan model itself:

## Load Stan model

```{r}
m <- here('code','qm_qpcr_joint.stan')

#IF YOU NEED TO ERROR CHECK, COPY AND PASTE "mc" INTO A NEW SCRIPT TO FIND THE RIGHT LINE NUMBERS
# mc <- cat(stan_model(m)@model_code)
```

# Run

Run Stan

```{r}
n.chains <- 1
n.warm <- 300
n.samps <- 300
jointMod = stan(file = m ,
                data = stan_data_joint,
                verbose = FALSE,
                chains = n.chains,
                thin = 1,
                warmup = n.warm,
                iter = n.warm+n.samps,
                control = list(adapt_init_buffer = 175,
                                  max_treedepth=12,
                                  stepsize=0.01,
                                  adapt_delta=0.7,
                                  metric="diag_e"),
                init = stan_init_f1(n.chains,N_obs_mb = stan_data_joint$N_obs_mb_samp,N_species = stan_data_joint$N_species),
                refresh = 10,
                boost_lib = NULL,
                sample_file="stan_samples.csv"
                )
```

```{r}
stansamps <- read_csv(here('code','stan_samples.csv'),
                      skip=25,
                      col_select=contains("mu_samp"))
```

```{r}
# try to compare a sample of mu to observed
mu_samp_est <- stansamps %>% slice(nrow(stansamps)-5) %>% unlist()
mu_samp_obs <- as.matrix(stan_data_joint$sample_data/rowSums(stan_data_joint$sample_data)) %>% c()
mu_samp_check <- tibble(est=mu_samp_est,ob=c(mu_samp_obs))
mu_samp_check %>% 
  ggplot(aes(est,ob))+
  geom_point()+
  geom_abline(slope=1,intercept=0,linetype=2)+
  labs(x="Estimated",y="Observed")
# obviously something's not wokring
```


```{r}
shinystan::launch_shinystan(jointMod)
```


```{r}
ests <- summary(jointMod,par="log_B")$summary
ests2 <- summary(jointMod,par="log_B_raw")$summary

```


```{r}
# QM_qPCR_joint_out <- QM_qPCR_bayes(m,
#                          stan_data_joint,
#                          NCHAINS=3,
#                          WARMUP = 100,
#                          ITER = 300)
# write_rds(QM_qPCR_joint_out, file = here("model_output/QM_qPCR_MiFish.rds"))
#QM_bayes_out <- readRDS(here("model_output/QM_bayes_MFU.RDS"))
#QM_bayes_out$Bayes_estimates
# QM_bayes_out$Bayes_alpha_est
#summary(QM_bayes_out$Bayes_modelfit)$summary[,"Rhat"] %>% sort() %>% tail()
# rstan::traceplot(QM_bayes_out$Bayes_modelfit, par = "alpha")
```

