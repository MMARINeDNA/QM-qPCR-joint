 ---
title: "Joint QM-qPCR Model of Hake Survey Samples"
format: 
  html: 
    self-contained: true
    toc: true
  pdf: 
    toc: true
    include-in-header:
      - text: |
          \usepackage{subfig}
          \usepackage{pdflscape}
          \newcommand{\blandscape}{\begin{landscape}}
          \newcommand{\elandscape}{\end{landscape}}
editor: source
---

```{r setup,warning=F,message=F}
library(tidyverse)
library(rstan)
here::i_am("QM-qPCR-joint.Rproj")
library(here)
options(tidyverse.quiet = TRUE, dplyr.summarise.inform = FALSE,dplyr.left_join.inform = FALSE)
```


# Introduction

We implement and fit a Stan model that jointly models qPCR and metabarcoding data for hake survey samples. The goal is to make quantitative estimates of real eDNA concentration for species for which we have MiFish metabarcoding data, but DO NOT have qPCR data. We use qPCR data from one, common reference species (Pacific hake) to expand metabarcoding read counts into quantitative eDNA concentration estimates.

# Import Data

The first script loads the metabarcoding, qPCR, and mock community data. The second script loads functions that are useful for working with the data and setting up the Stan model.

```{r}
source(here('code','load_QM-qPCR_data.R'))
```

## Format for Stan

We can prepare the data we just loaded to be input into our Stan model

```{r}
source(here("code/qm_data_prep_functions.R"))
```

```{r}
#qPCR
formatted_qPCR_data <- format_qPCR_data(qPCR_unknowns=qPCR_unk,
                                   qPCR_standards=qPCR_std,
                                   tube_dat = tube_dat,
                                   unk_covariates=c("wash_idx","station_depth_idx"),
                                   cov_type = c("continuous","factor"),
                                   unk_offset =c("dilution","volume_offset"))

stan_qPCR_data <- prepare_stan_data_qPCR(formatted_qPCR_data)

# metabarcoding
formatted_metabarcoding_data <- format_metabarcoding_data(input_metabarcoding_data=mfu, 
                                                          input_mock_comm_data=mock)

# linking with qPCR is now done within this next function.
stan_metabarcoding_data <-  prepare_stan_data_MB(obs= formatted_metabarcoding_data,
                                                 qPCR_tube_obs = formatted_qPCR_data$tube_dat,
                                                 N_pcr_cycles = 43)

# Define link species between qpCR<-->metabarcoding
link_species = "Zz_Merluccius productus"
qpcr_mb_link_sp_idx <- formatted_metabarcoding_data$sp_list %>% 
  filter(species==link_species) %>% 
  pull(species_idx)

# join the lists of Stan input data to make a final data list
stan_data_joint <- c(stan_qPCR_data,
                     stan_metabarcoding_data,
                     list(qpcr_mb_link_sp_idx=qpcr_mb_link_sp_idx))

# Check to make sure the order is correct for two of the design matrices that 
# map to observation and the tubes.  Very important.
identical(colnames(stan_data_joint$X_bio_rep_tube),colnames(stan_data_joint$X_bio_rep_obs))
identical(colnames(stan_data_joint$X_station_depth_tube),colnames(stan_data_joint$X_station_depth_obs))
```

Now the data should be ready for Stan. We compile the Stan model itself:

## Load Stan model

```{r}
m_dm_mock <- here('code','qm_mocks-DM.stan') # Dirichlet multinomial for mocks
m_dm_fix <- here('code','qm_qpcr_joint-DM_alpha-fix.stan')

#IF YOU NEED TO ERROR CHECK, COPY AND PASTE "mc" INTO A NEW SCRIPT TO FIND THE RIGHT LINE NUMBERS
# mc <- cat(stan_model(m)@model_code)
```

# Run

Run Stan

## Dirichlet (Mocks)

First, run the model for the mock communities

```{r}
# Mocks only
n.chains <- 3
n.warm <- 500
n.samps <- 10000

mocksMod = stan(file = m_dm_mock,
                model_name = "mock communities",
                data = stan_data_joint,
                verbose = FALSE,
                chains = n.chains,
                thin = 1,
                warmup = n.warm,
                iter = n.warm+n.samps,
                control = list(adapt_init_buffer = 75,
                                  max_treedepth=12,
                                  stepsize=0.01,
                                  adapt_delta=0.8,
                                  metric="diag_e"),
                #refresh = 100,
                boost_lib = NULL
                # sample_file="tmpU.csv"
                )

#summary(mocksMod)
A <- summary(mocksMod,pars="alpha")
B <- summary(mocksMod,pars="dm_alpha0_mock")

# rstan::traceplot(mocksMod,pars=c("alpha"))
# rstan::traceplot(mocksMod,pars=c("log_dm_alpha0_mock"))

alpha_fix <- A$summary %>% as.data.frame() %>% dplyr::select(mean) 
dm_alpha0_mock <- B$summary %>% as.data.frame() %>% dplyr::select(mean)

# augment the Stan data with these alpha values
stan_data_joint <- c(stan_data_joint,
                     list(alpha_fix=(alpha_fix$mean),
                          dm_alpha0_mock=dm_alpha0_mock$mean))

# a wee plot
Asumm <- A$summary %>% as_tibble()
alphap <- alpha_fix %>% bind_cols(stan_data_joint$sp_list) %>% mutate(lwr=Asumm$`2.5%`,upr=Asumm$`97.5%`) %>% 
  ggplot(aes(species,mean,ymin=lwr,ymax=upr))+
  geom_pointrange()+
  geom_hline(yintercept=0,linetype=2)+
  coord_flip()+
  theme_minimal()+
  labs(x="Species",y="Alpha")

alphap
```

## Mock fits

```{r,fig.height=6,fig.width=10}
# Code for these diagnostic plots
source(here('code','diagnostics.R'))
msumm <- get_param_ests(mocksMod)
plot_obs_pred_qm_mocks_only(s=msumm,stan_data = stan_data_joint)
```

## Fixed alphas

Then, run the joint model with fixed alphas drawn from the model above.

```{r}
n.chains <- 4
n.warm <- 2000
n.samps <-1000

# inits <- make_stan_inits(n.chain = n.chains,jointData = stan_data_joint,log_D_link_sp_init_mean = 2)

tictoc::tic("Running DM Joint Model:")
# jointMod_dm = stan(file = "qm_qpcr_joint-DM_alpha-fix.stan",
jointMod_dm = stan(file = m_dm_fix,
                model_name = "joint model fixed alphas",
                data = stan_data_joint,
                verbose = FALSE,
                chains = n.chains,
                thin = 1,
                warmup = n.warm,
                iter = n.warm+n.samps,
                control = list(adapt_init_buffer = 80,
                                max_treedepth=12,
                                stepsize=0.05,
                                adapt_delta=0.8,
                                metric="diag_e"),
                # init = inits,
                refresh = 10,
                boost_lib = NULL,
                sample_file="tmpX.csv"
                )
tictoc::toc()

# Write the output of the joint model
write_rds(jointMod_dm,here('data','jointMod_dm_alpha_fixed_adappt_150_tree_12.rds'))
```

